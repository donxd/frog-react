{"version":3,"sources":["Frog.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_BOXES","DEFAULT_SELECTED","DEFAULT_CONFIG","Frog","initialState","boxes","selected","config","boxesElements","state","this","loadGenerateObjectBoxes","generateObjectBoxes","setState","JSON","parse","stringify","nextProps","nextState","undefined","boxesElementsPrev","isChangeToApply","isValidChange","Object","assign","nBoxes","selectedBox","numberBoxes","boxSelected","i","box","getNewBoxObject","push","index","itemSelected","attrSelected","Number","parseInt","getBoxObject","item","newBoxSelection","length","forceUpdate","event","preventDefault","changeBoxes","value","newNumberBoxes","oldNumberBoxes","changeBoxesByObjects","oldNumberBoxesAux","addBoxesByObjects","removeBoxesByObjects","numberCreatedBoxes","numberNewBoxes","newBox","positionFrog","getPositionFrogAdvanced","newSelected","pop","changeState","changeSelected","newPosition","oldPosition","changeSelectedByObjects","newPositionSelection","filter","className","htmlFor","type","id","min","ref","el","onChange","e","changeInputBoxes","changeInputSelection","map","key","getIndex","onClick","jumpFrogAdv","getBoxClass","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.902a8d41.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Frog.css';\n\nconst CSS_STYLE_FROG = 'frog';\nconst DEFAULT_BOXES = 5;\nconst DEFAULT_SELECTED = 1;\nconst DEFAULT_CONFIG = false;\n\nclass Frog extends Component {\n    constructor () {\n        super();\n        this.initialState = {\n            boxes : DEFAULT_BOXES,\n            selected : DEFAULT_SELECTED,\n            config: DEFAULT_CONFIG,\n            boxesElements: [],\n        };\n        this.state = this.initialState;\n    }\n    componentDidMount () {\n        this.loadGenerateObjectBoxes();\n    }\n    loadGenerateObjectBoxes () {\n        this.generateObjectBoxes();\n        this.setState({boxesElements: JSON.parse(JSON.stringify(this.boxesElements))});\n    }\n    shouldComponentUpdate (nextProps, nextState) {\n        if ((this.boxesElementsPrev === undefined) || this.isChangeToApply(nextProps, nextState)) {\n            this.generateObjectBoxes(nextProps.boxes, nextProps.selected);\n            if (this.isValidChange(nextProps, nextState)) {\n                nextState.boxesElements = JSON.parse(JSON.stringify(this.boxesElements));\n            }\n            this.setState(Object.assign(nextState, {...nextProps}));\n            this.boxesElementsPrev = JSON.parse(JSON.stringify(nextState.boxesElements));\n            return true;\n        }\n\n        return false;\n    }\n    isValidChange (nextProps, nextState) {\n        return (nextProps.boxes !== undefined && nextState.boxes !== undefined && nextProps.boxes !== nextState.boxes) || \n                (nextProps.selected !== undefined && nextState.selected !== undefined && nextProps.selected !== nextState.selected);\n    }\n    isChangeToApply (nextProps, nextState) {\n        return (nextProps.boxes !== undefined && nextState.boxes !== undefined && nextProps.boxes !== nextState.boxes) ||\n            (nextProps.selected !== undefined && nextState.selected !== undefined && nextProps.selected !== nextState.selected) ||\n            (nextProps.config !== undefined && nextState.config !== undefined && nextProps.config !== nextState.config) ||\n            (this.boxesElementsPrev !== undefined && nextState.boxesElements !== undefined && JSON.stringify(this.boxesElementsPrev) !== JSON.stringify(nextState.boxesElements));\n    }\n    generateObjectBoxes (nBoxes=null, selectedBox=null) {\n        const numberBoxes = nBoxes !== null ? nBoxes : this.state.boxes;\n        const boxSelected = selectedBox !== null ? selectedBox : this.state.selected;\n\n        this.boxesElements = [];\n        for (let i = 0; i < numberBoxes; i++) {\n            const box = this.getNewBoxObject(i+1, boxSelected);\n\n            this.boxesElements.push(box);\n        }\n    }\n    getNewBoxObject (index, itemSelected) {\n        const attrSelected = index === Number.parseInt(itemSelected);\n\n        return this.getBoxObject(index, attrSelected);\n    }\n    getBoxObject (index, attrSelected) {\n        return {\n            selected: attrSelected, \n            index\n        };\n    }\n    getIndex (item) {\n        return item.index;\n    }\n    getBoxClass (item) {\n        return item.selected ? CSS_STYLE_FROG : '';\n    }\n    jumpFrogAdv (boxSelected) {\n        if (boxSelected.selected) {\n            const newBoxSelection = boxSelected.index < this.state.boxesElements.length ?\n                this.state.boxesElements[ boxSelected.index ] :\n                this.state.boxesElements[ 0 ];\n\n            let boxesElements = [...this.state.boxesElements];\n            this.boxesElementsPrev = [...boxesElements];\n\n            boxesElements[boxSelected.index-1].selected = false;\n            boxesElements[newBoxSelection.index-1].selected = true;\n\n            this.selected = `${newBoxSelection.index}`;\n            this.setState({boxesElements: boxesElements, selected: this.selected});\n            this.forceUpdate();\n        }\n    }\n    changeInputBoxes (event) {\n        event.preventDefault();\n        this.changeBoxes(this.boxes.value, this.state.boxes);\n    }\n    changeBoxes (newNumberBoxes, oldNumberBoxes=DEFAULT_SELECTED) {\n        this.changeBoxesByObjects(newNumberBoxes, oldNumberBoxes);\n    }\n    changeBoxesByObjects (newNumberBoxes, oldNumberBoxes) {\n        if (!newNumberBoxes) this.oldNumberBoxesAux = oldNumberBoxes;\n        if (!oldNumberBoxes) oldNumberBoxes = this.oldNumberBoxesAux;\n\n        if (newNumberBoxes > 0) {\n            if (newNumberBoxes > oldNumberBoxes) {\n                this.boxes = newNumberBoxes;\n                this.addBoxesByObjects();\n            } else if (newNumberBoxes < oldNumberBoxes) {\n                this.boxes = newNumberBoxes;\n                this.removeBoxesByObjects();\n            }\n        }\n    }\n    addBoxesByObjects () {\n        const numberCreatedBoxes = this.boxesElements.length;\n        const numberNewBoxes = this.boxes - numberCreatedBoxes;\n\n        this.boxesElements = [...this.state.boxesElements];\n\n        for (let i = 0; i < numberNewBoxes; i++) {\n            const newBox = this.getBoxObject(numberCreatedBoxes + 1, false);\n            this.boxesElements.push(newBox);\n        }\n\n        this.boxesElementsPrev = JSON.parse(JSON.stringify(this.boxesElements));\n        const positionFrog = this.getPositionFrogAdvanced(this.boxesElementsPrev);\n        this.selected = `${positionFrog}`;\n\n        this.setState({boxesElements: this.boxesElements, boxes: this.boxesElements.length, selected: this.selected});\n        this.forceUpdate();\n    }\n    removeBoxesByObjects () {\n        let positionFrog = this.getPositionFrogAdvanced(this.boxesElements);\n        const numberCreatedBoxes = this.boxesElements.length;\n        const numberBoxes = this.boxes;\n\n        this.boxesElements = [...this.state.boxesElements];\n\n        let newSelected = false;\n        if (positionFrog >= numberBoxes) {\n            positionFrog = numberBoxes;\n            this.selected = `${positionFrog}`;\n            this.boxesElements[positionFrog-1].selected = true;\n            newSelected = true;\n        }\n\n        for (let i = numberCreatedBoxes-1; i >= numberBoxes; i--) {\n            this.boxesElements.pop();\n        }\n\n        this.boxesElementsPrev = JSON.parse(JSON.stringify(this.boxesElements));\n\n        const changeState = newSelected ?\n            {boxesElements: this.boxesElements, boxes: this.boxesElements.length, selected: `${this.selected}`} :\n            {boxesElements: this.boxesElements, boxes: this.boxesElements.length};\n\n        this.setState(changeState);\n        this.forceUpdate();\n    }\n    changeInputSelection (event) {\n        event.preventDefault();\n\n        this.changeSelected(this.selected.value, this.state.selected);\n    }\n    changeSelected (newPosition, oldPosition=DEFAULT_BOXES) {\n        this.changeSelectedByObjects(newPosition, oldPosition);\n    }\n    changeSelectedByObjects (newPosition, oldPosition) {\n        let boxesElements = JSON.parse(JSON.stringify(this.state.boxesElements));\n\n        if (boxesElements && boxesElements.length && oldPosition > -1){\n            const positionFrog = this.getPositionFrogAdvanced(boxesElements);\n            const newPositionSelection = newPosition <= boxesElements.length ? newPosition : 1;\n\n            this.selected = newPositionSelection;\n            boxesElements[positionFrog-1].selected = false;\n            boxesElements[newPositionSelection-1].selected = true;\n            this.selected = `${newPositionSelection}`;\n\n            this.boxesElementsPrev = JSON.parse(JSON.stringify(this.state.boxesElements));\n\n            this.setState({boxesElements: boxesElements, selected: `${this.selected}`});\n            this.forceUpdate();\n        }\n    }\n    getPositionFrogAdvanced (boxesElements=null) {\n        if (boxesElements) return boxesElements.filter(box => box.selected)[0].index;\n\n        return this.state.boxesElements.filter(box => box.selected)[0].index;\n    }\n    render () {\n        return (\n            <div>\n                <h2>Hi frog - {this.state.boxes}!</h2>\n                {\n                    this.state.config ? (\n                        <div className='table'>\n                          <div className='row'>\n                            <div className='cell'>\n                              <label htmlFor=\"nboxes\">Número de cajas: &nbsp;</label>\n                            </div>\n                            <div className='cell'>\n                              <input type=\"number\" id=\"nboxes\" min=\"1\" value={this.state.boxes} ref={el => this.boxes=el} onChange={(e) => this.changeInputBoxes(e)} />\n                            </div>\n                          </div>\n                          <div className='row'>\n                            <div className='cell'>\n                              <label htmlFor=\"pfrog\">Posición rana: </label>\n                            </div>\n                            <div className='cell'>\n                              <input type=\"number\" id=\"pfrog\" min=\"1\" value={this.state.selected} ref={el => this.selected=el} onChange={(e) => this.changeInputSelection(e)} />\n                            </div>\n                          </div>\n                        </div>\n                    ) : null\n                }\n                <table id=\"elements\">\n                    <tbody>\n                        <tr>\n                            {this.state.boxesElements.map(item => {\n                                return (\n                                <td key={this.getIndex(item)}\n                                    onClick={() => this.jumpFrogAdv(item)}\n                                    className={this.getBoxClass(item)}>{this.getIndex(item)}</td>\n                                )\n                            })}\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Frog;","import React, { Component } from 'react';\nimport Frog from './Frog';\n\nclass App extends Component {\n  render () {\n    // <Frog></Frog>\n    // <Frog boxes=\"7\" selected=\"4\"></Frog>\n    // <Frog config selected=\"2\"></Frog>\n    // <Frog boxes=\"10\"></Frog>\n    // <Frog boxes=\"7\" selected=\"4\"></Frog>\n    // <Frog id='test_config' config></Frog>\n    \n    // <Frog boxes=\"7\" selected=\"4\"></Frog>\n    return (\n      <div>\n          <Frog></Frog>\n          <Frog boxes=\"7\" selected=\"4\"></Frog>\n          <Frog config selected=\"2\"></Frog>\n          <Frog boxes=\"10\"></Frog>\n          <Frog boxes=\"7\" selected=\"4\"></Frog>\n          <Frog id='test_config' config></Frog>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}